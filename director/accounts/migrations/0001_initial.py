# Generated by Django 2.0.8 on 2018-08-30 07:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.utils.text import slugify
from django.db import IntegrityError

ACCOUNT_MEMBER_NAME = 'Account member'
ACCOUNT_ADMIN_NAME = 'Account admin'
MODIFY_PERMISSION = 'modify'
ADMINISTER_PERMISSION = 'administer'


def create_default_account_roles(apps, schema_editor):
    """
    Create the initial AccountRole/AccountPermission map. The values are hard coded since the application might change
    after this migration has been created. Future migrations should delete these roles if they become redundant.
    """

    AccountPermission = apps.get_model('accounts', 'AccountPermission')
    AccountRole = apps.get_model('accounts', 'AccountRole')

    # the AccountPermission Enum may have changed since this migration was created so hard code the permissions in here

    perm_cache = {}

    for permission_type in (MODIFY_PERMISSION, ADMINISTER_PERMISSION):
        perm, created = AccountPermission.objects.get_or_create(type=permission_type)
        perm_cache[permission_type] = perm

    role_map = (
        (ACCOUNT_MEMBER_NAME, (MODIFY_PERMISSION,)),
        (ACCOUNT_ADMIN_NAME, (MODIFY_PERMISSION, ADMINISTER_PERMISSION))
    )

    for role_name, role_permissions in role_map:
        role, created = AccountRole.objects.get_or_create(name=role_name)

        if not created:
            role.permissions.clear()

        role.permissions.add(*[perm_cache[name] for name in role_permissions])

        role.save()


def create_account_for_users(apps, schema_editor):
    """
    Will make sure each user is an `Account admin` on at least one `Account` so that their `Project`s can be assigned to
    an `Account` for ownership.

    This migration should be called after `create_default_account_roles` as it assumes the Roles/Permissions that that
    function creates exist.
    """
    Account = apps.get_model('accounts', 'Account')
    User = apps.get_model('auth', 'User')
    AccountRole = apps.get_model('accounts', 'AccountRole')
    AccountUserRole = apps.get_model('accounts', 'AccountUserRole')

    admin_role = AccountRole.objects.get(name=ACCOUNT_ADMIN_NAME)

    for user in User.objects.all():
        account_user_role = AccountUserRole.objects.filter(role=admin_role, user=user)

        if account_user_role.count() != 0:
            continue

        suffix_number = 2
        suffix = ''
        while True:
            if suffix_number == 100:
                raise RuntimeError("Suffix number hit 100.")

            account_name = '{}-personal-account{}'.format(slugify(user.username), suffix)

            try:
                account = Account.objects.create(name=account_name)
                break
            except IntegrityError:
                suffix = '-{}'.format(suffix_number)
                suffix_number += 1

        AccountUserRole.objects.create(role=admin_role, account=account, user=user)


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='AccountPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField(choices=[('MODIFY', 'modify'), ('ADMINISTER', 'administer')], unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='AccountRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('permissions', models.ManyToManyField(related_name='roles', to='accounts.AccountPermission')),
            ],
        ),
        migrations.CreateModel(
            name='AccountUserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_roles',
                                              to='accounts.Account')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+',
                                           to='accounts.AccountRole')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='account_roles',
                                           to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.Account')),
                ('members', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RunPython(create_default_account_roles),
        migrations.RunPython(create_account_for_users)
    ]
