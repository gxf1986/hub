swagger: '2.0'

info:
  title: Stencila API
  version: 1.0
  description: |
    The Stencila API is under rapid development. So,

      - not all of the endpoints that are documented here are implemented!
      - not all of the endpoint that are implemented are documented here!
      - much of the documentation here may not match what is currently implemented!

    Please bear with us, we are working hard to get the API settled down and to version 1.0.

    The API uses the ampersand `@` to denote calls to methods of components. We use `address/of/component@method` instead of `address/of/component/method` so that it is possible to resolve where a component address ends and the method name starts. We use `@` instead of `.` to easily differentiate method URL endpoints from raw file endpoints. The ampersand is a valid charater for a HTTP URL (see page 17 of http://tools.ietf.org/html/rfc1738).


{% if MODE != 'local' %}
host: stenci.la
{% endif %}
basePath: /
schemes:
{% if MODE != 'local' %}
  - https
{% else %}
  - http
{% endif %}
consumes:
  - application/json
produces:
  - application/json
  - text/html

paths:

  ###########################################################################
  # Components
  ###########################################################################


  /{address}@activate:

    put:
      summary: Activate a component by starting a session for it.
      tags:
        - Components
      parameters:
        - name: address
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successfully activated.
          schema:
            $ref: '#/definitions/Session'


  /{address}@deactivate:

    put:
      summary: Deactivate a component by stopping the current session for it.
      tags:
        - Components
      parameters:
        - name: address
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successfully deactivated.
          schema:
            $ref: '#/definitions/Session'

  /{address}@save:

    put:
      summary: Save a component.
      tags:
        - Components
      parameters:
        - name: address
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successfully saved.

  /{address}@commit:

    put:
      summary: Commit changes to a component.
      tags:
        - Components
      parameters:
        - name: address
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successfully committed.

  /{address}@commits:

    get:
      summary: Get the commits for a component.
      tags:
        - Components
      parameters:
        - name: address
          in: path
          required: true
          type: string
      responses:
        200:
          schema:
            type: array
            items:
              type: object
              properties:
                foo:
                  type: string

  /{address}@sync:

    put:
      summary: Synchronise a component with the master repository.
      tags:
        - Components
      parameters:
        - name: address
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successfully synchronised.

  /{address}@received:

    put:
      summary: Notify that a component repository has received updates.
      description: |
        This endpoint is intended for the `curator` role only. 
        It is called when the repository is updated (e.g. by a `git push`).
      tags:
        - Components
      parameters:
        - name: address
          in: path
          required: true
          type: string
        - name: data
          in: body
          required: true
          schema:
            type: object
            properties:
              token:
                type: string
      responses:
        200:
          description: Successfully notified.


  /{address}@content:

    get:
      summary: Get the content of a stencil.
      tags:
        - Stencils
      parameters:
        - name: address
          in: path
          required: true
          type: string
        - name: format
          in: query
          type: string
          default: 'html'
      responses:
        200:
          schema:
            properties:
              revision:
                type: string
                required: true
              format:
                type: string
                required: true
              content:
                type: string
                required: true

    put:
      summary: Set the content of a stencil.
      tags:
        - Stencils
      parameters:
        - name: address
          in: path
          required: true
          type: string
        - name: data
          in: body
          required: true
          schema:
            type: object
            properties:
              revision:
                type: string
                required: true
              format:
                type: string
                required: true
              content:
                type: string
                required: true
      responses:
        200:
          schema:
            properties:
              revision:
                type: string
                required: true
              status:
                type: integer
                required: true



  ###########################################################################
  # Me
  ###########################################################################

  /me:

    get:
      summary: Read the current user.
      tags:
        - Me
      responses:
        200:
          description: Data on the user
          schema:
            $ref: '#/definitions/Me'


  ###########################################################################
  # Tokens
  ###########################################################################

  /tokens:

    get:
      summary: List user tokens.
      tags:
        - Tokens
      responses:
        200:
          description: List of user tokens
          schema:
            type: array
            items:
              $ref: '#/definitions/Token'

    post:
      summary: Create a user token.
      description: |
        User tokens
      tags:
        - Tokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Token'
          description: |
            Data on the user token; only `name` and `notes` can be input.
      responses:
        200:
          description: Data on the new user token
          schema:
            $ref: '#/definitions/Token'

  /tokens/{id}:

    get:
      summary: Read a user token.
      tags:
        - Tokens
      parameters:
        - name: id
          type: number
          in: path
          required: true
          description: ID of the token
      responses:
        200:
          description: Data on the user token
          schema:
            $ref: '#/definitions/Token'

    patch:
      summary: Update a user token.
      tags:
        - Tokens
      parameters:
        - name: id
          type: number
          in: path
          required: true
          description: ID of the token
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Token'
          description: |
            Data on the user token; only `name` and `notes` can be updated.
      responses:
        200:
          description: Data on the user token
          schema:
            $ref: '#/definitions/Token'

    delete:
      summary: Delete a user token.
      tags:
        - Tokens
      parameters:
        - name: id
          type: number
          in: path
          required: true
          description: ID of the token
      responses:
        200:
          description: Successfully deleted


  ###########################################################################
  # Users
  ###########################################################################

  /users:

    get:
      summary: List users.
      tags:
        - Users
      responses:
        200:
          description: A list of users.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

  /users/{username}:

    get:
      summary: Read a user.
      description: |
        Not all data on the user is available. Use `/me` to get more detailed data on the
        user that is currently authenticated.
      tags:
        - Users
      parameters:
        - name: username
          type: string
          in: path
          required: true
          description: Username of the user
      responses:
        200:
          description: Data on the user
          schema:
            $ref: '#/definitions/User'


definitions:

  Account:
    type: object
    required:
      - name
      - type
    properties:
      name:
        type: string
      type:
        type: string

  Component:
    properties:
      address:
        type: string
        description: Address of this component
      type:
        type: string
        description: Type of this component (e.g. stencil, theme)
      url:
        type: string
        description: URL for this component
      tiny:
        type: string
        description: Tiny URL for this component
      account:
        $ref: '#/definitions/Account'
        description: |
          Account which owns this component. Determined as the account which owns the component's address, or a it's parent address.
      public:
        type: boolean
        description: |
          Is this component public? Determined by whether the component's address, or a it's parent address, is public.
      rights:
        type: string
        description: Access rights for the current user for this component ('READ','UPDATE',etc)
      favourites:
        type: int
        description: Number of times this component has been favourited
      favourited:
        type: boolean
        description: Has this component been favourtied by the current user?
      forks:
        type: int
        description: Number of times this component has been forked


  Me:
    properties:
      username:
        type: string
      date_joined:
        type: string
        format: date-time
      last_login:
        type: string
        format: date-time

  Session:
    type: object
    properties:
      id:
        type: string
      user:
        $ref: '#/definitions/User'
      component:
        $ref: '#/definitions/Component'
      url:
        type: string
      websocket:
        type: string
      ready:
        type: boolean
      status:
        type: string

  Token:
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
      version:
        type: string
        description: Version number of the token coding
      string:
        type: string
        description: Encoded token string
      issued:
        type: string
        format: date-time
      expires:
        type: string
        format: date-time
      notes:
        type: string


  User:
    properties:
      username:
        type: string
