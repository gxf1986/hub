# Generated by Django 2.0.8 on 2018-08-14 21:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def create_publisher_group(apps, schema_editor):
    group_class = apps.get_model("auth", "Group")
    publisher_group, created = group_class.objects.get_or_create(name='Publisher')


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='URL for API access to administrate this Session')),
                ('started', models.DateTimeField(help_text='DateTime this Session was started', null=True)),
                ('stopped', models.DateTimeField(
                    help_text='DateTime this Session was stopped (or that we detected it had stopped)', null=True)),
                ('last_check',
                 models.DateTimeField(help_text='The last time the status of this Session was checked', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SessionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When the SessionGroup was created')),
                ('token', models.TextField(help_text='A token to publicly identify the SessionGroup (in URLs etc)',
                                           unique=True)),
                ('key', models.TextField(blank=True, help_text='Key required to create Sessions in this SessionGroup',
                                         null=True)),
                ('max_sessions', models.IntegerField(
                    help_text='Maximum total number of sessions that can be created in this SessionGroup (null = unlimited)',
                    null=True)),
                ('max_concurrent', models.IntegerField(
                    help_text='Maximum number of sessions allowed to run at one time for this SessionGroup (null = unlimited)',
                    null=True)),
                ('max_queue', models.IntegerField(
                    help_text='Maximum number of users waiting for a new Session to be created in this Session Group (null = unlimited)',
                    null=True)),
                ('owner', models.ForeignKey(help_text='User who owns the SessionGroup', null=True,
                                            on_delete=django.db.models.deletion.SET_NULL, related_name='session_groups',
                                            to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SessionTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('description',
                 models.TextField(blank=True, help_text='Optional long description about the SessionTemplate',
                                  null=True)),
                ('memory', models.FloatField(default=1, help_text='Gigabytes (GB) of memory allocated')),
                ('cpu', models.FloatField(default=1, help_text='CPU shares (out of 100 per CPU) allocated')),
                ('network', models.FloatField(blank=True,
                                              help_text='Gigabytes (GB) of network transfer allocated. null = unlimited',
                                              null=True)),
                ('lifetime',
                 models.IntegerField(blank=True, help_text='Minutes before the session is terminated. null = unlimited',
                                     null=True)),
                ('timeout',
                 models.IntegerField(default=60, help_text='Minutes of inactivity before the session is terminated')),
                ('owner', models.ForeignKey(help_text='User who owns the SessionTemplate', null=True,
                                            on_delete=django.db.models.deletion.SET_NULL,
                                            related_name='session_templates', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='sessiongroup',
            name='template',
            field=models.ForeignKey(
                help_text='The SessionTemplate that defines resources for new sessions in this group.', null=True,
                on_delete=django.db.models.deletion.SET_NULL, related_name='session_groups',
                to='publisher.SessionTemplate'),
        ),
        migrations.AddField(
            model_name='session',
            name='group',
            field=models.ForeignKey(help_text='The SessionGroup that this Session belongs to.',
                                    on_delete=django.db.models.deletion.PROTECT, related_name='sessions',
                                    to='publisher.SessionGroup'),
        ),
        migrations.RunPython(create_publisher_group)
    ]
