# -*- coding: utf-8 -*-
# Generated by Django 1.9b1 on 2015-11-12 02:12
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0002_initial_data'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.CharField(help_text='Address string e.g. "pangea/swamp/pond', max_length=1024, primary_key=True, serialize=False)),
                ('public', models.BooleanField(default=True, help_text='Is this address publically readable?')),
                ('occupied', models.BooleanField(default=False, help_text='Is this address occupied by a component?')),
                ('account', models.ForeignKey(help_text='The account that owns this address', on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='accounts.Account')),
            ],
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, help_text='Type of this component', max_length=16, null=True)),
                ('title', models.CharField(blank=True, help_text='A brief title for the component. Can be duplicated', max_length=1024, null=True)),
                ('summary', models.TextField(blank=True, help_text='A summary of the component.', null=True)),
                ('initialised', models.DateTimeField(blank=True, help_text='Time that the repository for this component was last created', null=True)),
                ('updated', models.DateTimeField(blank=True, help_text='Time that the metadata on this component was last updated', null=True)),
                ('shown', models.BooleanField(default=True, help_text='Should this component be shown is listings of components at an address?')),
                ('views', models.IntegerField(default=0, help_text='Number of views of this component.')),
                ('stars', models.IntegerField(default=0, help_text='Number of times this component has been starred')),
                ('forks', models.IntegerField(default=0, help_text='Number of times this component has been forked')),
                ('address', models.ForeignKey(help_text='Address of this component', on_delete=django.db.models.deletion.CASCADE, to='components.Address')),
                ('forkee', models.ForeignKey(blank=True, help_text='Component from which this component was forked', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='forkers', to='components.Component')),
            ],
        ),
        migrations.CreateModel(
            name='Key',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='A name for this key.', max_length=1024, null=True)),
                ('type', models.CharField(blank=True, choices=[('address', 'Address'), ('session', 'Session'), ('stencil', 'Stencil'), ('theme', 'Theme')], help_text='The type of component or resource this key gives access rights to.If blank, gives access to all types of component.', max_length=32, null=True)),
                ('action', models.IntegerField(choices=[(0, 'NONE'), (10, 'READ'), (20, 'ANNOTATE'), (30, 'UPDATE'), (40, 'AUTHORIZE'), (50, 'DELETE'), (60, 'CREATE')], help_text='The access right granted by this key to a component.')),
                ('notes', models.TextField(blank=True, help_text='Notes about this key', null=True)),
                ('address', models.ForeignKey(help_text='The address this key gives access rights to.', on_delete=django.db.models.deletion.CASCADE, related_name='keys', to='components.Address')),
                ('users', models.ManyToManyField(help_text='The users that hold this key', related_name='keys', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
